# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatic
        type: pass
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done
        auto_publish: true
        hide_calculated: true
    2: &writing
        type: float
        subgrades:
            points: integer
        calculation: (points / 4.0 * 9 + 1).round(1)
        hide_calculated: true
    3: &aftekenen
        type: pass
        subgrades:
            gedaan: boolean
        calculation: gedaan
        hide_calculated: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:

    hardware: *writing
    intro: *writing
    binary: *aftekenen
    unix: *writing

    security: *writing
    opsys: *writing
    filesys: *writing

    multimedia: *writing
    binrep: *writing
    text_coding: *writing
    file_formats: *writing

    pr1: *writing
    pr2: *writing
    pr3: *writing
    pr4: *writing
    pr5: *writing
    pr6: *writing
    pr7: *writing

    pidac_1: *aftekenen
    pidac_2: *aftekenen
    pidac_3: *aftekenen

# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    eindcijfer:
        module_1: 1
        module_2: 1
        module_3: 1
        module_4: 1
        module_5: 1
        module_6: 1
        module_7: 1
        pidac: 1
        process_books: 1

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

module_1:
    show_progress: true
    submits:
        hardware: 1
        intro: 1
        binary: 0
        unix: 1

module_2:
    show_progress: true
    submits:
        security: 1
        opsys: 1
        filesys: 1

module_3:
    show_progress: true
    submits:
        multimedia: 1
        binrep: 1
        text_coding: 1
        file_formats: 1

pidac:
    show_progress: true
    required: true
    submits:
        pidac_1: 1
        pidac_2: 1
        pidac_3: 1

process_books:
    show_progress: true
    minimum: 5.5
    submits:
        pr1: 1
        pr2: 1
        pr3: 1
        pr4: 1
        pr5: 1
        pr6: 1
        pr7: 1
